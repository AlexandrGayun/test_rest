// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: profile.sql

package storage

import (
	"context"
	"database/sql"
)

const getProfileByUsername = `-- name: GetProfileByUsername :one
SELECT user.id, user.username, ud.school, up.first_name, up.last_name, up.phone, up.address, up.city FROM user
LEFT JOIN user_data AS ud ON user.id = ud.user_id
LEFT JOIN user_profile AS up ON user.id = up.user_id
WHERE user.username = ?
LIMIT 1
`

type GetProfileByUsernameRow struct {
	ID        int64
	Username  string
	School    sql.NullString
	FirstName sql.NullString
	LastName  sql.NullString
	Phone     sql.NullString
	Address   sql.NullString
	City      sql.NullString
}

func (q *Queries) GetProfileByUsername(ctx context.Context, username string) (GetProfileByUsernameRow, error) {
	row := q.db.QueryRowContext(ctx, getProfileByUsername, username)
	var i GetProfileByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.School,
		&i.FirstName,
		&i.LastName,
		&i.Phone,
		&i.Address,
		&i.City,
	)
	return i, err
}

const getProfiles = `-- name: GetProfiles :many
SELECT user.id, user.username, ud.school, up.first_name, up.last_name, up.phone, up.address, up.city FROM user
LEFT JOIN user_data AS ud ON user.id = ud.user_id
LEFT JOIN user_profile AS up ON user.id = up.user_id
`

type GetProfilesRow struct {
	ID        int64
	Username  string
	School    sql.NullString
	FirstName sql.NullString
	LastName  sql.NullString
	Phone     sql.NullString
	Address   sql.NullString
	City      sql.NullString
}

func (q *Queries) GetProfiles(ctx context.Context) ([]GetProfilesRow, error) {
	rows, err := q.db.QueryContext(ctx, getProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetProfilesRow
	for rows.Next() {
		var i GetProfilesRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.School,
			&i.FirstName,
			&i.LastName,
			&i.Phone,
			&i.Address,
			&i.City,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
